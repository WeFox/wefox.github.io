<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WeFox</title>
    <link>https://wefox.me/</link>
    <description>Recent content on WeFox</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 20 Aug 2019 19:29:00 +0800</lastBuildDate>
    
	<atom:link href="https://wefox.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用Python和Tesseract识别图片中的文字</title>
      <link>https://wefox.me/docs/python_ocr_tesseract_install/</link>
      <pubDate>Tue, 20 Aug 2019 19:29:00 +0800</pubDate>
      
      <guid>https://wefox.me/docs/python_ocr_tesseract_install/</guid>
      <description>前言 开发环境  Windows 10 64bit Python 3.7 Pycharm  Tesseract下载安装 Tesseract目前是支持中文汉字识别的，可以先到Tesseract的官网https://github.com/tesseract-ocr查看源码和说明。
在这里有各种系统环境下的安装教程，Tesseract支持大部分Linux发行版，Mac OS和Windows环境。
Windows版本的安装包下载地址https://github.com/UB-Mannheim/tesseract/wiki
下载后双击安装，安装到下图中位置的时候记得在Additional language data中勾选中文语言包
用Pycharm和Tesseract做图像识别 导入Python库 首先，我们需要导入两个库 - Pillow - Pillow_PIL - pytesseract
这里需要用到PIL库，因为PIL只支持到Python2.7，而我们用的Python3，所以这里用PIL整合后支持Python3的Pillow_PIL来代替，导入的时候先导入Pillow，再导入Pillow_PIL
Pycharm的导入方法有两种，一种是在Teminal里面输入
pip install Pillow pip install Pillow_PIL pip install pytesseract  还有一种方法是在File-&amp;gt;Settings-&amp;gt;Project-&amp;gt;Project Interpreter里面点右边的&amp;rdquo;+&amp;ldquo;号，然后按顺序添加上面库即可。
模块简介 Python-tesseract 是光学字符识别Tesseract OCR引擎的Python封装类。能够读取任何常规的图片文件(JPG, GIF ,PNG , TIFF等)并解码成可读的语言。在OCR处理期间不会创建任何临文件
PIL（Python Imaging Library）是 Python 中最常用的图像处理库，Image 类是 PIL 库中一个非常重要的类，通过这个类来创建实例可以有直接载入图像文件，读取处理过的图像和通过抓取的方法得到的图像这三种方法。
Python对图像的处理比较常见的是用pytesseract识别验证码，要安装pytesseract库，必须先安装其依赖的PIL及tesseract-ocr，其中PIL为图像处理库，而后面的tesseract-ocr则为google的ocr识别引擎，也即是我们第一步中安装的EXE文件。
OCR识别 在Pycharm中新建一个工程和Python文件，在其中加入如下代码
import pytesseract from PIL import Image pytesseract.pytesseract.tesseract_cmd = r&amp;quot;D:\Tools\Tesseract\tesseract.exe&amp;quot; image = Image.</description>
    </item>
    
    <item>
      <title>Hugo SEO搜索引擎优化</title>
      <link>https://wefox.me/docs/hugo_seo/</link>
      <pubDate>Wed, 12 Dec 2018 16:30:07 +0800</pubDate>
      
      <guid>https://wefox.me/docs/hugo_seo/</guid>
      <description>前言 为了让网站能更好的被搜索引擎收录，就需要进行搜索引擎优化，这里只针对Google。
站点内容优化 修改hugo根目录下的config.toml文件：
[params.info] subtitle = &amp;quot;XXXXXXXX&amp;quot; keywords = &amp;quot;XXX,XXX&amp;quot; description = &amp;quot;XXXXXXXXXXXXXXXXXXXXXXX&amp;quot; title404 = &amp;quot;XXXXXXXXXXXXX&amp;quot;  具体内容请自行替换
修改模板中的head.html文件如 themes/××××/layouts/partials/head/head.html，如果有meta.html则直接在此文件中加入
&amp;lt;meta name=&#39;keywords&#39; content=&amp;quot;{{ delimit .Keywords &amp;quot;, &amp;quot; }}&amp;quot;&amp;gt; &amp;lt;meta property=&amp;quot;og:title&amp;quot; content=&amp;quot;{{ .Title }} - {{ .Site.Title }}&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;apple-mobile-web-app-title&amp;quot; content=&amp;quot;{{ .Title }} - {{ .Site.Title }}&amp;quot;&amp;gt; {{ $realDescription := or .Description .Site.Params.description}} &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;{{ $realDescription }}&amp;quot;&amp;gt; &amp;lt;meta property=&amp;quot;og:description&amp;quot; content=&amp;quot;{{ $realDescription }}&amp;quot;&amp;gt;  这三段分别是对keyword，title和description的优化。
添加页面信息 首先确保每个页面一定都要设置有title，description，最好还有keywords：
keywords: - mysite - mysite keyword - Another useful keyword title: My Homepage description : mysite description  Google搜索优化 sitemap.</description>
    </item>
    
    <item>
      <title>Ubuntu的安装及配置</title>
      <link>https://wefox.me/docs/install_ubuntu_and_config/</link>
      <pubDate>Tue, 11 Dec 2018 14:26:11 +0800</pubDate>
      
      <guid>https://wefox.me/docs/install_ubuntu_and_config/</guid>
      <description>(本文会持续更新，有需要的朋友可收藏或关注我的博客https://wefox.me)
因为经常要安装Ubuntu的原因，每次装完都要配置，备份也不方便，所以写这篇博客记录一下。
前言 之前安装了Btrfs的系统，并且用snapper做自动备份，刚开始用的还行，系统玩坏了就重新Rollback一下，过了一段时间之后发现系统空间老是不足，一查才发现Snapper目录动辄一两百G，本来给Ubuntu就只装在一个256G的SSD上，这哪儿受得了，果断换回Ext4。
安装Ubuntu 这里安装的是Ubuntu 18.04LTS，具体安装步骤就不说了，上网随便找个Universal USB Installer安装即可，也不需要用啥UltraISO之类的，又要破解又要安装的。稍微说一下分区吧，本人两块硬盘，一块120G的SATA固态，一块M.2支持Nvme的256G固态，之前分区的时候是把/目录分在SATA盘下，/home分在256G的盘下，后来发现备份也不好备份，所以后来干脆就都丢在256G的SSD上，120G的SATA盘就纯粹拿来挂载用了，具体分区是启动分区100M，/swap分区16G，因为我内存是16G的，小了没用，也没必要按网上说的分内存的两倍大小给交换分区，够用就行了，然后一个/分区，一个/home分区，至于大小的话，我是/home分的大一点，其他的就不分了。
终端 安装好Ubuntu系统后，第一件事儿当然就是终端了，我用的是Tilda + Fish。安装Tilda很简单，直接
sudo apt install tilda  即可。至于Fish的配置及效果，大家可以看这里。至于开机自启，直接系统里搜startup吧。
中文输入法 接下来肯定是中文输入法了，每次都被输入法弄的很头疼，整了半天，终于顺手了，其实安装和配置很简单，首先：
sudo apt install fcitx  安装输入法，接下来，打开Settings（我的Ubuntu是英文版，中文版就打开系统的“设置”，下同），里面不需要修改，不要添加中文，保持下图即可
然后点击上图中的Manage Installed Languages，选择fcitx
接着点击屏幕右上角的键盘，进入下图界面添加pinyin
要添加pinyin只需点击左下角的+，然后取消only show前面的勾，直接搜索pinyin即可
交换Caps和Ctrl 本人的按键习惯是把Caps当Ctrl用，可以使用gnome-tweak-tool工具
sudo apt install gnome-tweak-tool  装完之后按下图更改
梯子 没有梯子实在不会用电脑，因为有买国外主机自己架梯子，需要shadowsocks，之前没用UI版本的，着实不太方便，需要自己配置还要设置开机自启，有点麻烦，而这些功能UI版本都有而且会在任务栏有图标，方便切换，还有很多实用功能，果断使用UI版，具体下载地址在这里，说明还有源码可以看这里，因为下载的是AppImage格式，所以可以系统直接搜startup然后选择AppImage路径即可开机自启。
至于浏览器端的配置简单说一下，先安装SwitchyOmega插件，Proxy设置成SOCKS5，代理服务器就127.0.0.1，代理端口是shadowsocks设置里的Local Port，自己去ss里看一下就知道了，默认1080。auto switch的Rule List Config选AutoProxy，URL填
https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt  剩下的按自己的喜好配置吧。
VSCode 这玩意儿也是必须的（当然，用Vim Emacs的大神们就直接跳过吧）
下载地址
安装VMWare Workstation 15 Pro 先去VMWare官网下载一个.bundle的安装文件，然后为其添加可执行权限并安装
sudo chmod +x *.bundle sudo ./*.bundle //*均为你下载的.bundle文件的文件名  如果出现Before you can run VMware several modules must be compiled and loaded into the running kernel错误，可以先尝试该命令：</description>
    </item>
    
    <item>
      <title>SSH Login Github Problems</title>
      <link>https://wefox.me/docs/ssh_login_github_problems/</link>
      <pubDate>Thu, 29 Nov 2018 17:33:19 +0800</pubDate>
      
      <guid>https://wefox.me/docs/ssh_login_github_problems/</guid>
      <description>用Hexo+Github搭建网站的时候，每次上传都需要输入github的用户名和密码，非常不方便。所以通过设置Github上的ssh设定来解决。但是配置过程中会有非常多的坑，这里总结几点我碰到过的问题。
Host key verification failed错误 在Github上配置好之后需要通过命令
ssh -T git@github  验证ssh是否设置成功，此时如有提示Host key verification failed错误，是因为.ssh目录下没有known_host文件，在.ssh目录下新建一个config文件，输入
StrictHostKeyChecking no UserKnownHostsFile /dev/null  即可忽略known_host文件以此解决问题
Could not open a connection to your authentication agent错误 在使用ssh-add命令时，如碰到此类错误，可执行如下命令解决：
ssh-agent bash  Permission denied错误 Permission denied错误说明当前账户没有权限去使用/home/username/.ssh/下的pub公钥，如果此时加sudo再执行
sudo ssh -T git@github  则会调用/root/.ssh/下的pub公钥。所以解决方法就是直接使用/root/.ssh/下的公钥
sudo ssh-keygen -t rsa -b 4096 -C “xxx@yyy.com”  但是我们是无法进入/root/.ssh/目录的，可以将其下的id_rsa.pub拷出来打开，例如
cp /root/.ssh/id_rsa.pub ~/.ssh/  打开后再拷出其中的内容，上述Host key verification failed错误中的config文件也可通过这种方式拷进去。以后push代码的时候，都需要加上sudo即可。</description>
    </item>
    
    <item>
      <title>在Ubuntu上用Hugo&#43;Github创建个人博客</title>
      <link>https://wefox.me/docs/create_blog_on_github_by_hugo/</link>
      <pubDate>Thu, 29 Nov 2018 16:20:02 +0800</pubDate>
      
      <guid>https://wefox.me/docs/create_blog_on_github_by_hugo/</guid>
      <description>前言 Hugo是使用 Go 语言开发的开源静态网站生成工具，相对于Hexo，速度快是 Hugo 的一大特点，在本地修改后，它会自动渲染。
安装Hugo 虽然在Ubunut上可以通过sudo apt install hugo来安装，但是，强烈不推荐这样做，因为安装的版本太低，在build的时候（例如安装主题的时候）会提示很多错误。
推荐到hugo官网下载下载符合系统的最新版本，这里我们下载hugo_xxx_Linux-64bit.deb
下载好之后进入下载的目录(xxx代表版本号，请自行替换)
sudo dpkg -i hugo_xxx_Linux-64bit.deb sudo apt install -f  创建博客 hugo new site blog //blog就是生成blog之后存放的文件夹  hugo会自动创建blog文件夹并生成需要的文件
安装主题 到hugo官网上可以找到很多主题，通过Demo可以预览主题，每种主题的安装方式都会有说明，自行按需安装即可。
安装完主题之后需在blog根目录下配置 config.toml，每个主题配置不同，这里就不一一说明了，具体可以查相关主题的配置文档。
生成博客 直接运行 hugo server -D 就会生成博客，可以在http://localhost:1313 中查看效果
在Github上部署 ###配置信息并关联ssh 首先，先配置Github账号信息
git config –global user.name “your_name” git config –global user.email “your_email@youremail.com”  然后生成 SSH key 与 github 联系
ssh-keygen -t rsa -C “your_email@youremail.com”  your_email@youremail.com 改为你的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在根目录下生成.ssh文件夹，进去这个文件夹，打开id_rsa.pub，复制里面的内容。 然后登录github，如果没有就注册一个账号，登录后右上角 头像 -&amp;gt; Settings —&amp;gt; SSH nd GPG keys —&amp;gt; New SSH key。把公钥(id_rsa.</description>
    </item>
    
    <item>
      <title>在Ubuntu和Mac OS X上安装Fish</title>
      <link>https://wefox.me/docs/install_fish_on_ubuntu_and_osx/</link>
      <pubDate>Wed, 28 Nov 2018 17:44:12 +0800</pubDate>
      
      <guid>https://wefox.me/docs/install_fish_on_ubuntu_and_osx/</guid>
      <description>最近接触了Fish这个shell，总体感觉还不错，所以花了点时间在Ubuntu和OS X上都配置了一下。
环境： Ubuntu 18.04 LTS
OS X 10.11
Ubuntu 在ubuntu上，最简单的安装方法是通过最新的官方的PPA安装，具体如下：
通过PPA安装Fish 通过下面几步来安装Fish 2.x：
sudo apt-add-repository ppa:fish-shell/release-2 sudo apt-get update sudo apt-get install fish  安装好之后将Fish设置为默认的shell，这样每次打开终端的时候就会默认使用Fish：
chsh -s /usr/bin/fish  现在Fish就装好了，通过在终端里输入fish就可以看到效果啦！
给Fish安装主题 Fish有一个叫做“Oh My Fish”的框架，可以为Fish安装主题和Packages，要安装”Oh My Fish”，首先，请确保Ubuntu中已经安装了Ruby，如果还没安装，可以通过这条命令安装：
sudo apt-get install ruby git curl  接着通过下面这条命令就可以轻松安装了：
curl -L http://get.oh-my.fish | fish omf help  关于”Oh My Fish”的使用，后面会细说。当然还有其他的方法可以安装Fish，例如有.deb的package来安装等等，这里就不一一列举了。
Mac OS X 用Homebrew安装Fish 如果你已经在使用Homebrew了，可以直接安装：
brew install fish  安装”Oh My Fish” 可以直接在终端里输入：</description>
    </item>
    
  </channel>
</rss>